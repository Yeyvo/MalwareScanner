terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region = var.region
}


resource "aws_key_pair" "MainSanbServer_ec2key" {
  key_name   = var.MainSanbServer_key_name
  public_key = tls_private_key.MainSanbServer_RSA.public_key_openssh
}

resource "tls_private_key" "MainSanbServer_RSA" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "local_file" "MainSanbServer_key" {
  content         = tls_private_key.MainSanbServer_RSA.private_key_pem
  file_permission = "0400"
  filename        = format("%s.pem", var.MainSanbServer_private_key_path)
}
####################################################################################
#####################################  EC2  ########################################
####################################################################################

resource "aws_instance" "MainSanbServer" {
  ami                         = "ami-0e6dff8bde9a09539"
  instance_type               = var.instance_type
  vpc_security_group_ids      = [module.Main_Sandboxed_Security_Group.security_group_id]
  associate_public_ip_address = true
  subnet_id                   = module.Main_Sandboxed_Public_Subnet.subnet_id
  key_name                    = aws_key_pair.MainSanbServer_ec2key.key_name

  connection {
    type = "ssh"
    user = "ubuntu"
    # private_key = file(var.MainSanbServer_public_key_path)
    private_key = file(format("%s.pem", var.MainSanbServer_private_key_path))
    host        = self.public_ip
    password    = ""
  }

  provisioner "local-exec" {
    command = "chmod 400 ${var.MainSanbServer_private_key_path}.pem"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update && sudo apt-get upgrade -y",
      "sudo apt-get install python3-pip -y",
      "git clone https://github.com/Yeyvo/MalwareScanner.git",
      "cd MalwareScanner/Server",
      "pip install -r requirements.txt",
      "python3 app.py"
    ]
  }


  tags = {
    "Name" = "mainbSanbServer"
  }
}


#   Example of a Malware sanboxed server 

# resource "aws_instance" "MalwareSanbServer" {
#   ami                         = "ami-830c94e3"
#   instance_type               = var.instance_type
#   vpc_security_group_ids      = [module.Malware_Sandboxed_Security_Group.security_group_id]
#   associate_public_ip_address = true
#   subnet_id                   = module.Malware_Sandboxed_Public_Subnet.subnet_id

#   tags = {
#     "Name" = "malwareSanbServer"
#   }
# }



####################################################################################
#####################################  VPC  ########################################
####################################################################################

module "Main_Sandboxed_VPC" {
  source = "./modules/networking/vpc"

  vpc-cidr = var.cidr_vpc_main
  vpc_name = "Main_Env_VPC"

}

module "Malware_Sandboxed_VPC" {
  source = "./modules/networking/vpc"

  vpc-cidr = var.cidr_vpc_malware
  vpc_name = "Malware_Env_VPC"
}



####################################################################################
#################################  VPC PEERING  ####################################
####################################################################################

resource "aws_vpc_peering_connection" "vpc_peering" {

  vpc_id      = module.Main_Sandboxed_VPC.vpc_id
  peer_vpc_id = module.Malware_Sandboxed_VPC.vpc_id

  auto_accept = true


  tags = {

    Name = "vpc_peering_Main_Malware"


  }
  depends_on = [module.Malware_Sandboxed_VPC, module.Main_Sandboxed_VPC]


}



####################################################################################
###################################  Subnets  ######################################
####################################################################################

module "Main_Sandboxed_Public_Subnet" {
  source = "./modules/networking/subnet"

  public_subnet_cidr = module.Main_Sandboxed_VPC.vpc-cidr
  vpc_id             = module.Main_Sandboxed_VPC.vpc_id
  public_subnet_name = "Main_Env_Public_Subnet"
}

module "Malware_Sandboxed_Public_Subnet" {
  source = "./modules/networking/subnet"

  public_subnet_cidr = module.Malware_Sandboxed_VPC.vpc-cidr
  vpc_id             = module.Malware_Sandboxed_VPC.vpc_id
  public_subnet_name = "Malware_Env_Public_Subnet"
}



####################################################################################
#################################  Route Tables  ###################################
####################################################################################

resource "aws_route_table" "Main_Sandboxed_Public_route_table" {
  vpc_id = module.Main_Sandboxed_VPC.vpc_id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = module.Main_Sandboxed_IGW.igw_id
  }

  route {
    ipv6_cidr_block = "::/0"
    gateway_id      = module.Main_Sandboxed_IGW.igw_id
  }

  route {
    cidr_block                = module.Malware_Sandboxed_VPC.vpc-cidr
    vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id

  }

  depends_on = [
    aws_vpc_peering_connection.vpc_peering
  ]

  tags = {
    Name = "Main_Env_Public_Route_Table"
  }
}

resource "aws_route_table" "Malware_Sandboxed_Public_route_table" {
  vpc_id = module.Malware_Sandboxed_VPC.vpc_id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = module.Malware_Sandboxed_IGW.igw_id
  }

  route {
    ipv6_cidr_block = "::/0"
    gateway_id      = module.Malware_Sandboxed_IGW.igw_id
  }

  route {
    cidr_block                = module.Main_Sandboxed_VPC.vpc-cidr
    vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id
  }

  depends_on = [
    aws_vpc_peering_connection.vpc_peering
  ]

  tags = {
    Name = "Malware_Env_Public_Route_Table"
  }
}



####################################################################################
###############################  Route Table Association  ##########################
####################################################################################

resource "aws_route_table_association" "Main_Sandboxed_Route_Table_association" {
  subnet_id      = module.Main_Sandboxed_Public_Subnet.subnet_id
  route_table_id = aws_route_table.Main_Sandboxed_Public_route_table.id
}

resource "aws_route_table_association" "Malware_Sandboxed_Route_Table_association" {
  subnet_id      = module.Malware_Sandboxed_Public_Subnet.subnet_id
  route_table_id = aws_route_table.Malware_Sandboxed_Public_route_table.id
}



####################################################################################
###############################  Internet Gateways  ################################
####################################################################################

module "Main_Sandboxed_IGW" {
  source = "./modules/networking/gateway"

  vpc_id   = module.Main_Sandboxed_VPC.vpc_id
  igw_name = "Main_Env_Internet_Gateway"
}

module "Malware_Sandboxed_IGW" {
  source = "./modules/networking/gateway"

  vpc_id   = module.Malware_Sandboxed_VPC.vpc_id
  igw_name = "Main_Env_Internet_Gateway"
}



####################################################################################
###############################  Security Groups  ##################################
####################################################################################

module "Main_Sandboxed_Security_Group" {
  source = "./modules/networking/security-groups"

  vpc_id                     = module.Main_Sandboxed_VPC.vpc_id
  security_group_name        = "Main_Env_Security_Group"
  security_group_description = "Main_Env_Security_Group"
}

module "Malware_Sandboxed_Security_Group" {
  source = "./modules/networking/security-groups"

  vpc_id                     = module.Malware_Sandboxed_VPC.vpc_id
  security_group_name        = "Malware_Env_Security_Group"
  security_group_description = "Malware_Env_Security_Group"
}
