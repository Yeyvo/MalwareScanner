import boto3


def delete_mirror_session_by_id(ec2_ressource, mirror_session_id: str) -> None:
    ec2_ressource.meta.client.delete_traffic_mirror_session(
        TrafficMirrorSessionId=mirror_session_id,
    )


def delete_mirror_filter_id_by_id(ec2_ressource, mirror_filter_id: str, mirror_filter_rules: list[str]) -> None:
    for mirror_filter_rule_id in mirror_filter_rules:
        ec2_ressource.meta.client.delete_traffic_mirror_filter_rule(
            TrafficMirrorFilterRuleId=mirror_filter_rule_id
        )

    ec2_ressource.meta.client.delete_traffic_mirror_filter(
        TrafficMirrorFilterId=mirror_filter_id
    )


def delete_mirror_target_by_id(ec2_ressource, mirror_target_id: str) -> None:

    ec2_ressource.meta.client.delete_traffic_mirror_target(
        TrafficMirrorTargetId=mirror_target_id
    )


def terminate_ec2_by_id(ec2_ressource, instance_id: str) -> None:

    instance = ec2_ressource.Instance(instance_id)
    instance.terminate()
    print(f'Terminating EC2 instance: {instance.id}')
    instance.wait_until_terminated()


def create_mirror_target(ec2_ressource, target_eni_id):

    return ec2_ressource.meta.client.create_traffic_mirror_target(
        NetworkInterfaceId=target_eni_id
    )['TrafficMirrorTarget']['TrafficMirrorTargetId']


def create_mirror_filter(ec2_ressource):

    filter_id = ec2_ressource.meta.client.create_traffic_mirror_filter(
    )['TrafficMirrorFilter']['TrafficMirrorFilterId']

    rules_id = []

    resp = ec2_ressource.meta.client.create_traffic_mirror_filter_rule(
        TrafficMirrorFilterId=filter_id,
        TrafficDirection='ingress',
        RuleNumber=1,
        RuleAction='accept',
        DestinationCidrBlock='0.0.0.0/0',
        SourceCidrBlock='0.0.0.0/0'
    )
    rules_id.append(resp['TrafficMirrorFilterRuleId'])

    resp = ec2_ressource.meta.client.create_traffic_mirror_filter_rule(
        TrafficMirrorFilterId=filter_id,
        TrafficDirection='egress',
        RuleNumber=1,
        RuleAction='accept',
        DestinationCidrBlock='0.0.0.0/0',
        SourceCidrBlock='0.0.0.0/0'
    )
    rules_id.append(resp['TrafficMirrorFilterRuleId'])

    return filter_id, rules_id


def create_mirror_session(ec2_ressource, mirror_target_id, mirror_filter_id, network_interface_id):

    return ec2_ressource.meta.client.create_traffic_mirror_session(
        NetworkInterfaceId=network_interface_id,
        # NetworkInterfaceId=instance['NetworkInterfaces'][0]['NetworkInterfaceId'],
        TrafficMirrorTargetId=mirror_target_id,
        TrafficMirrorFilterId=mirror_filter_id,
        SessionNumber=1
    )['TrafficMirrorSession']['TrafficMirrorSessionId']


def getSecurityGroupID(ec2_ressource, malware_sandboxed_VPC_id: str) -> str:
    SecurityGroup = ec2_ressource.meta.client.describe_security_groups(

        Filters=[{"Name": "tag:Name", "Values": ["Malware_Env_Security_Group"]}]
    )
    return SecurityGroup['SecurityGroups'][0]["GroupId"]


def getSubnetID(ec2_ressource, malware_sandboxed_VPC_id: str) -> str:
    subnets = ec2_ressource.subnets.filter(
        Filters=[{"Name": "vpc-id", "Values": [malware_sandboxed_VPC_id]}]
    )
    subnet_ids = [sn.id for sn in subnets]
    return subnet_ids[0]


def getVpcID(ec2_ressource, vpc_name: str, cidr_block: str) -> str:

    malware_sandboxed_VPC = ec2_ressource.meta.client.describe_vpcs(
        Filters=[
            {
                'Name': 'tag:Name',
                'Values': [
                    vpc_name,
                ]
            },
            {
                'Name': 'cidr-block-association.cidr-block',
                'Values': [
                    cidr_block,
                ]
            },
        ]
    )

    malware_sandboxed_VPC = malware_sandboxed_VPC['Vpcs']

    malware_sandboxed_VPC_id = malware_sandboxed_VPC[0]["VpcId"]

    return malware_sandboxed_VPC_id


def getInitialData():
    ec2_ressource = boto3.resource('ec2', region_name='us-west-2')
    initial_data = {}

    initial_data['AMI'] = "ami-0e6dff8bde9a09539"
    initial_data['VPC_ID'] = getVpcID(
        ec2_ressource, 'Malware_Env_VPC', '10.1.0.0/18')
    initial_data['SUBNET_ID'] = getSubnetID(
        ec2_ressource, initial_data['VPC_ID'])
    initial_data['SECURITY_GROUP_ID'] = getSecurityGroupID(
        ec2_ressource, "Malware_Env_Security_Group")
    initial_data['INSTANCE_TYPE'] = 't2.micro'

    print("****************************************************")
    print("initial_data: {}".format(initial_data))
    print("****************************************************")

    return initial_data
