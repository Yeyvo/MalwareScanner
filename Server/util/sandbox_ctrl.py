import asyncio
import boto3
import botocore

from util import aws_utils


REGION_NAME = 'us-west-2'

# NOT FULLY TESTED
# TODO lauch malware in vm


async def create_vm(initial_data, malware_url: str) -> str:
    ec2_ressource = boto3.resource('ec2', region_name=REGION_NAME)
    try:
        instance = ec2_ressource.create_instances(
            ImageId=initial_data['AMI'],
            InstanceType=initial_data['INSTANCE_TYPE'],
            MaxCount=1,
            MinCount=1,
            NetworkInterfaces=[{
                'SubnetId': initial_data['SUBNET_ID'],
                'DeviceIndex': 0,
                'AssociatePublicIpAddress': True,
                'Groups': [initial_data['SECURITY_GROUP_ID']]
            }],
            KeyName=initial_data['MALWARE_SANDBOXED_KEYNAME']
        )

        pass
        instance = instance[0]

        instance.wait_until_running()
        instance.reload()

        NETWORK_INTERFACE_ID = instance.network_interfaces[0].id

        mirror_data = {}

        if initial_data["ISNITRO"]:
            # if (mirror_data.get("mirror_target_id") is None):
            #     mirror_data["mirror_target_id"] = aws_utils.create_mirror_target(
            #         ec2_ressource, initial_data['MAIN_SERVER_NETWORK_INTERFACE_ID'])
            mirror_data["mirror_filter_id"], mirror_data["mirror_filter_rules_ids"] = aws_utils.create_mirror_filter(
                ec2_ressource)
            mirror_data["mirror_session_id"] = aws_utils.create_mirror_session(
                ec2_ressource, initial_data["mirror_target_id"], mirror_data["mirror_filter_id"], NETWORK_INTERFACE_ID)

        all_data = {}

        all_data['publicIP'] = instance.public_ip_address
        all_data['privateIP'] = instance.private_ip_address
        all_data['instance_id'] = instance.instance_id
        all_data['mirror_data'] = mirror_data

        print("****************************************************")
        print(all_data)
        print("****************************************************")
        # aws_utils.execute_commands_instances(ec2_ressource=ec2_ressource, commands=initial_data['MALWARE_SERVER_ONLAUNCH_COMMAND'], instance_ids=[
        #                                      all_data['instance_id']], isLinuxInstance=initial_data['IS_LINUX_INSTANCE'])

        aws_utils.execute_commands_instances_ssh(
            commands=initial_data['MALWARE_SERVER_ONLAUNCH_COMMAND'], instance_ips=[], initial_keyname_path=initial_data['MALWARE_SANDBOXED_KEYNAME_PATH'])

    except botocore.exceptions.ClientError as error:
        # logger.error(error)
        raise

    except botocore.exceptions.ParamValidationError as error:
        raise ValueError(
            'The parameters you provided are incorrect: {}'.format(error))
    return all_data

# NOT FULLY TESTED


async def stop_vm(instance_id: str, mirror_data, initial_data) -> None:
    ec2_ressource = boto3.resource('ec2', region_name=REGION_NAME)
    try:
        if initial_data["ISNITRO"]:
            aws_utils.delete_mirror_session_by_id(
                ec2_ressource, mirror_data["mirror_session_id"])
            aws_utils.delete_mirror_filter_id_by_id(
                ec2_ressource, mirror_data["mirror_filter_id"], mirror_data["mirror_filter_rules_ids"])
            # aws_utils.delete_mirror_target_by_id(
            #     ec2_ressource, mirror_data["mirror_target_id"])
        aws_utils.terminate_ec2_by_id(ec2_ressource, instance_id)
    except botocore.exceptions.ClientError as error:
        # logger.error(error)
        raise

    except botocore.exceptions.ParamValidationError as error:
        raise ValueError(
            'The parameters you provided are incorrect: {}'.format(error))
