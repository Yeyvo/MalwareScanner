import json
import pyshark

# capture = pyshark.LiveCapture(interface='Wi-Fi')

# for packet in capture.sniff_continuously():
#     print(packet)


def capture_live_packets(network_interface):
    capture = pyshark.LiveCapture(interface=network_interface)
    for raw_packet in capture.sniff_continuously():
        protocol = filter_all_tcp_traffic_file(raw_packet)
# if protocol != "TCP" and protocol != "UDP":
        print(protocol)


def get_packet_details(packet):
    """
    This function is designed to parse specific details from an individual packet.
    :param packet: raw packet from either a pcap file or via live capture using TShark
    :return: specific packet details
    """
    cars = packet
    for x in cars:
        print (x)
        for y in cars[x]:
            print (y,':',cars[x][y])
    protocol = packet.transport_layer
    source_port = 0
    if protocol is not None:
        source_port = packet[packet.transport_layer].srcport
    return protocol, source_port
    # source_address = packet.ip.src if hasattr(packet, "ip") else None
    # source_port = packet[packet.transport_layer].srcport
    # destination_address = packet.ip.dst if hasattr(packet, "ip") else None
    # destination_port = packet[packet.transport_layer].dstport
    # packet_time = packet.sniff_time
    # # return f'Packet Timestamp: {packet_time}' \
    # #        f'\nProtocol type: {protocol}' \
    # #        f'\nSource address: {source_address}' \
    # #        f'\nSource port: {source_port}' \
    # #        f'\nDestination address: {destination_address}' \
    # #        f'\nDestination port: {destination_port}\n'
    # return f'{protocol} - {destination_address}'


def filter_all_tcp_traffic_file(packet):
    """
    This function is designed to parse all the Transmission Control Protocol(TCP) packets
    :param packet: raw packet
    :return: specific packet details
    """
    results = get_packet_details(packet)
    return results


capture_live_packets('Wi-Fi')
