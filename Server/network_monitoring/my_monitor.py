from typing import List
import pyshark
import threading
import asyncio

class Filter:
		def __init__(self, **kwargs) -> None:
				self.protocol = kwargs.get("protocol")
				self.source_addr = kwargs.get("source_addr")
				self.source_port = kwargs.get("source_port")
				self.destination_addr = kwargs.get("destination_addr")
				self.destination_port = kwargs.get("destination_port")
		
		def filter(self, packet): 
				return True

class Packet:
		def __init__(self, kwargs) -> None:
			self.protocol = kwargs.get("protocol")
			self.source_addr = kwargs.get("source_addr")
			self.source_port = kwargs.get("source_port")
			self.destination_addr = kwargs.get("destination_addr")
			self.destination_port = kwargs.get("destination_port")

class Monitor(threading.Thread):
		capture = True

		def __init__(self, network_interface: str, filters: List[Filter], callback) -> None:
				threading.Thread.__init__(self)
				self._loop = asyncio.new_event_loop()
				self.network_interface = network_interface
				self.filters = filters
				self.callback = callback

		def run(self):
			# self._loop.run_until_complete(self.monitor())
			# self._loop.run_forever()
			try:
				loop = asyncio.new_event_loop();
				asyncio.set_event_loop(loop)
				loop.run_until_complete(self.monitor())
				loop.close()
			except Exception:
					pass

		def monitor(self):
				capture = True
				print("monitoring " + self.network_interface)
				capture = pyshark.LiveCapture(interface=self.network_interface)
				for raw_packet in capture.sniff_continuously():
						if not self.capture:
								capture.close()
						packet = self.format_packet(raw_packet)
						passes = True
						for f in self.filters:
							if not f.filter(packet):
								passes = False
								break
						if passes:
							self.callback(packet)
				
		
		def stop(self):
				self.capture = False

		def format_packet(self, raw_packet):
				protocol = raw_packet.transport_layer
				source_address = raw_packet.ip.src if hasattr(raw_packet, "ip") else None
				source_port = 0
				try:
					source_port = raw_packet[raw_packet.transport_layer].srcport
				except Exception:
					pass
				destination_address = raw_packet.ip.dst if hasattr(raw_packet, "ip") else None
				destination_port = 0
				try:
					destination_port = raw_packet[raw_packet.transport_layer].dstport
				except Exception:
					pass
				
				return Packet({
					"protocol": protocol,
					"source_addr": source_address,
					"source_port": source_port,
					"destination_addr": destination_address,
					"destination_port": destination_port
				})
