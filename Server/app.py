from aiohttp import web
import socketio
import uuid
import util
from network_monitoring import Monitor

sio = socketio.AsyncServer()

app = web.Application()

sio.attach(app)

@sio.on('test')
async def test_socketio(sid, message):
    print("Socket ID: " , sid)
    print(message)

# the events we support
# from client to server : test_malware, stop
# from server to client : visited_ip (contains ip and port)

@sio.on('test_malware')
async def test_malware(sid, message):
    id = sid + uuid.uuid4().hex
    url = message.get("url")

    sio.emit('info', {
        'status': 'creating',
        'id': id,
        'url': url
    }, room=sid)
    #FIXME: return info about the created vm (ip adress ...)
    await util.create_vm(name=id, malware_url=url)

    def callback(packet):
        destination_addr = packet.get("destination_addr")
        protocol = packet.get("destination_addr")
        destination_port = packet.get("destionation_port")
        if destination_addr:
            sio.emit('visited_ip', {
                "dest_ip": destination_addr,
                "dest_port": destination_port,
                "transport_layer_protocol": protocol
            }, room=sid)
    #TODO: add destination_addr to filters
    #TODO: figure out how to stop monitor (where to store ref to monitor)
    #TODO: where to get network interface name
    monitor = Monitor("the_network_interface", filters=[], callback=callback)

    sio.emit('info', {
        'status': 'running malware',
        'id': id,
        'url': url
    }, room=sid)


@sio.on('stop')
async def stop_malware(sid, message):
    #TODO: stop the monitoring too

    #TODO: check if id is provided, check if vm with id `id` exists, else return error right away
    id = message.get("id")

    sio.emit('info', {
        'status': 'shutting down',
        'id': id
    }, room=sid)

    #FIXME: return final status of the vm (off)
    await util.stop_vm(name=id)

    sio.emit('info', {
        'status': 'off',
        'id': id
    }, room=sid)

if __name__ == '__main__':
    web.run_app(app, port=8081)
