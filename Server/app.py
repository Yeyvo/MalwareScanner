from aiohttp import web
import socketio
import uuid
import util
import asyncio
from network_monitoring import Monitor, Filter

sio = socketio.AsyncServer()

app = web.Application()

sio.attach(app)

# store contains pointers to monitors 
# format: sid <==> {"monitor" : monitor, "vm_id": id}
# for now each user must have only one monitor, therefore one vm 
# when creating a vm we must check if the sid already exists
# if it exists we refuse to create another vm
# unless the user send a force flag, then we close the running vm and create another one
# else if the sid doesn't exists in the store then we create the vm and create a monitor and add it to the store
# when the user stops a malware test, we close the monitor associated to it in the store and remove the sid key
# TODO: when the user disconnects, if his sid exists in the store we close the monitor associated to him and we stop the vm (we must also store the vm id)
store = {}

# the events we support
# from client to server : test_malware, stop
# from server to client : visited_ip (contains ip and port)

@sio.on('test_malware')
async def test_malware(sid, message):
    # check if user already has a vm running and he didn't send the force flag
    if store.get(sid):
        if not message.get("force"):
            await sio.emit('info', {
                "status": "can't test more than one malware"
            }, room=sid)
            return
        await sio.emit('info', {
            "status": f"forcing existing sandbox : {store.get(sid).get('vm_id')} to turn off"
        }, room=sid)
        store.get(sid).get("monitor").stop()
        store.pop(sid, None)

    id = sid + uuid.uuid4().hex
    url = message.get("url")

    sio.emit('info', {
        'status': 'creating',
        'id': id,
        'url': url
    }, room=sid)
    # return info about the created vm (ip adress ...)
    source_addr = await util.create_vm(name=id, malware_url=url)

    def callback(packet):
        destination_addr = packet.get("destination_addr")
        protocol = packet.get("destination_addr")
        destination_port = packet.get("destionation_port")
        if destination_addr:
            sio.emit('visited_ip', {
                "dest_ip": destination_addr,
                "dest_port": destination_port,
                "transport_layer_protocol": protocol
            }, room=sid)
    # figure out how to stop monitor (where to store ref to monitor)
    # network_interface = "eth0"
    network_interface = "Wi-Fi"
    monitor = Monitor(network_interface, filters=[Filter(source_addr=source_addr)], callback=callback)
    print("inserting into store")
    store[sid] = {
        "monitor": monitor,
        "vm_id": id
    }
    print(store)
    await sio.emit('info', {
        'status': 'running malware',
        'id': id,
        'url': url
    }, room=sid)
    monitor.monitor()


@sio.on('stop')
async def stop_malware(sid, message):
    # check if user has a malware test running
    print(store)
    if not store.get(sid):
        # user does not have a malware test running
        await sio.emit('info', {
            "status": f"you do not have any running malware"
        }, room=sid)

    # stop the monitoring too
    vm_id = store.get(sid).get('vm_id')

    await sio.emit('info', {
        "status": f"forcing existing sandbox : {store.get(sid).get('vm_id')} to turn off"
    }, room=sid)
    store.get(sid).get("monitor").stop()
    store.pop(sid, None)

    await sio.emit('info', {
        'status': 'shutting down',
        'id': vm_id
    }, room=sid)

    #FIXME: return final status of the vm (off)
    await util.stop_vm(name=vm_id)

    await sio.emit('info', {
        'status': 'off',
        'id': id
    }, room=sid)

#TODO: stop vms when user disconects 
@sio.event
async def disconnect(sid):
    print('disconnect ', sid)

    # checking if this user has any running malware tests
    if store.get(sid):
        await sio.emit('info', {
            "status": f"forcing existing sandbox : {store.get(sid).get('vm_id')} to turn off"
        }, room=sid)
        
        vm_id = store.get(sid).get('vm_id')
        # stop and destroy the monitoring object
        store.get(sid).get("monitor").stop()
        store.pop(sid, None)
        # stop the vm
        await util.stop_vm(name=vm_id)

if __name__ == '__main__':
    web.run_app(app, port=8081)
